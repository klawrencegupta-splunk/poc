############################
###         Logs         ###
############################

[source::.../var/log/splunk/Splunk_TA_f5_bigip_main*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = f5:bigip:addon:log

[source::...\\var\\log\\splunk\\Splunk_TA_f5_bigip_main*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = f5:bigip:addon:log


############################
###        Rename        ###
############################

### GTM ###
[f5_bigip:irule:dns:request]
rename = f5:bigip:gtm:dns:request:irule

[f5_bigip:irule:dns:response]
rename = f5:bigip:gtm:dns:response:irule

[f5_bigip:icontrol:globallb]
rename = f5:bigip:gtm:globallb:icontrol

### LTM ###
[f5_bigip:irule:http]
rename = f5:bigip:ltm:http:irule

[f5_bigip:irule:lb:failed]
rename = f5:bigip:ltm:failed:irule

[f5_bigip:icontrol:locallb]
rename = f5:bigip:ltm:locallb:icontrol

[f5_bigip:icontrol:locallb:pool]
rename = f5:bigip:ltm:locallb:pool:icontrol


### General ###
[f5_bigip:syslog]
rename = f5:bigip:syslog

[f5_bigip:icontrol]
rename = f5:bigip:icontrol
#For tasks created in old version.
MAX_TIMESTAMP_LOOKAHEAD = 1
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
TRANSFORMS-sourcetype=f5_bigip-icontrol-locallb, f5_bigip-icontrol-globallb, f5_bigip-icontrol-networking, f5_bigip-icontrol-management, f5_bigip-icontrol-system-systeminfo, f5_bigip-icontrol-system-statistics, f5_bigip-icontrol-system-disk, f5_bigip-icontrol-management-device, f5_bigip-icontrol-networking-interfaces, f5_bigip-icontrol-networking-adminip, f5_bigip-icontrol-locallb-pool, f5_bigip-icontrol-management-usermanagement


[f5_bigip:icontrol:system:systeminfo]
rename = f5:bigip:system:systeminfo:icontrol

[f5_bigip:icontrol:system:statistics]
rename = f5:bigip:system:statistics:icontrol

[f5_bigip:icontrol:system:disk]
rename = f5:bigip:system:disk:icontrol

[f5_bigip:icontrol:management:device]
rename = f5:bigip:management:device:icontrol

[f5_bigip:icontrol:networking:interfaces]
rename = f5:bigip:networking:interfaces:icontrol

[f5_bigip:icontrol:networking:adminip]
rename = f5:bigip:networking:adminip:icontrol

[f5_bigip:icontrol:management:usermanagement]
rename = f5:bigip:management:usermanagement:icontrol

[f5_bigip:icontrol:networking]
rename = f5:bigip:networking:icontrol

[f5_bigip:icontrol:management]
rename = f5:bigip:management:icontrol

#fix bug ADDON-4931
[f5:bigip:ltm:failed::irule]
rename = f5:bigip:ltm:failed:irule

############################
###         Data         ###
############################

### GTM ###
[f5:bigip:gtm:dns:request:irule]
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host

[f5:bigip:gtm:dns:response:irule]
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host

[f5:bigip:gtm:globallb:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-object_type = case(module_interface=="GlobalLB.WideIP", "GTM", module_interface=="GlobalLB.Pool", "Pool", module_interface=="GlobalLB.VirtualServerV2", "VIP")
EVAL-member_type = case(isnull(member) or member=="", null, module_interface=="GlobalLB.WideIP", "Pool", module_interface=="GlobalLB.Pool", "VIP")
FIELDALIAS-get_object_status_availability_status_avl_status_string = get_object_status.availability_status as avl_status_string
LOOKUP-f5_icontrol_availability_status = f5_icontrol_availability_status avl_status_string OUTPUTNEW avl_status
FIELDALIAS-enbl_status = get_object_status.enabled_status as enbl_status
FIELDALIAS-get_list_name = get_list.name as get_list_name
EVAL-name = case(module_interface=="GlobalLB.WideIP", get_list, module_interface=="GlobalLB.Pool", get_list, module_interface=="GlobalLB.VirtualServerV2", get_list_name)
FIELDALIAS-get_get_all_statistics_wide_ip = get_all_statistics.wide_ip as name
FIELDALIAS-get_all_statistics_pool_name = get_all_statistics.pool_name as name
FIELDALIAS-get_address_address = get_address.address as address
FIELDALIAS-get_address_port = get_address.port as port
FIELDALIAS-get_member_v2__name = get_member_v2{}.name as member
FIELDALIAS-get_wideip_pool__pool_name = get_wideip_pool{}.pool_name as member
FIELDALIAS-get_lb_method = get_lb_method as lb_method

### LTM ###
[f5:bigip:ltm:http:irule]
EXTRACT-pool = virtual_server=\"((?P<pool>\S+)\s)?(\S+\s)?\d+\",
FIELDALIAS-src = src_ip as src
FIELDALIAS-status = http_status as status
FIELDALIAS-url = http_url as url
FIELDALIAS-dest = http_host as dest
FIELDALIAS-site = http_host as site
FIELDALIAS-uri_path = http_uri as uri_path
FIELDALIAS-dest_ip = vip as dest_ip
EXTRACT-extract_dest_port = http_host=\S+:(?<dest_port>\d+)
FIELDALIAS-dest_addr = vip as dest_addr
FIELDALIAS-dest_translated_ip = node as dest_translated_ip
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host
EVAL-is_f5_heartbeat = if(src_ip==f5_bigip_server_host, "true", "false")
EVAL-protocol="HTTP"
FIELDALIAS-src_addr = src_ip as src_addr
FIELDALIAS-rtt = req_elapsed_time as rtt
FIELDALIAS-http_status_2_response_code = http_status as response_code
FIELDALIAS-http_user_agent_2_client_type = http_user_agent as client_type

[f5:bigip:ltm:failed:irule]
FIELDALIAS-f5_bigip_server_host = host as f5_bigip_server_host

[f5:bigip:ltm:locallb:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-object_type = case(module_interface=="LocalLB.VirtualServer", "VIP", module_interface=="LocalLB.NodeAddressV2", "RealServer")
EVAL-member_type = case(isnull(member) or member=="", null, module_interface=="LocalLB.VirtualServer", "Pool")
FIELDALIAS-get_object_status_availability_status_avl_status_string = get_object_status.availability_status as avl_status_string
LOOKUP-f5_icontrol_availability_status = f5_icontrol_availability_status avl_status_string OUTPUTNEW avl_status
FIELDALIAS-enbl_status = get_object_status.enabled_status as enbl_status
FIELDALIAS-name = get_list as name
FIELDALIAS-get_all_statistics_virtual_server_name = get_all_statistics.virtual_server.name as name
FIELDALIAS-get_all_statistics_node = get_all_statistics.node as name
FIELDALIAS-get_address = get_address as address
FIELDALIAS-get_destination_v2_address = get_destination_v2.address as address
FIELDALIAS-get_all_statistics_virtual_address = get_all_statistics.virtual_address as address
FIELDALIAS-get_destination_v2_port = get_destination_v2.port as port
FIELDALIAS-get_member_v2 = get_member_v2{}.address as member
FIELDALIAS-get_default_pool_name_member = get_default_pool_name as member
FIELDALIAS-get_all_statistics.statistics__type = get_all_statistics.statistics{}.type as statistics_types
FIELDALIAS-get_all_statistics.statistics__value_low = get_all_statistics.statistics{}.value.low as statistics_values
EVAL-current_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")))
EVAL-throughput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-total_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")))
EVAL-sessions = if(mvfind(statistics_types, "^STATISTIC_CURRENT_SESSIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_CURRENT_SESSIONS$")))
EVAL-interface_connections = if(mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_CURRENT_CONNECTIONS$")))
EVAL-vip_connections = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")))
EVAL-interface_throughput = if(mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_CLIENT_SIDE_BYTES_IN$")))
EVAL-vip_throughput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-node = if(module_interface=="LocalLB.NodeAddressV2", get_address, null)

[f5:bigip:ltm:locallb:pool:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-object_type = "Pool"
FIELDALIAS-lb_method = get_lb_method as lb_method
FIELDALIAS-get_object_status_availability_status_avl_status_string = get_object_status.availability_status as avl_status_string
LOOKUP-f5_icontrol_availability_status = f5_icontrol_availability_status avl_status_string OUTPUTNEW avl_status
FIELDALIAS-enbl_status = get_object_status.enabled_status as enbl_status
FIELDALIAS-name = get_list as name
FIELDALIAS-get_list_2_pool = get_list as pool
FIELDALIAS-get_all_statistics_pool_name = get_all_statistics.pool_name as name
EVAL-member_type = if(isnull(member) or member=="", null, "RealServer")
FIELDALIAS-get_member_v2 = get_member_v2{}.address as member
FIELDALIAS-get_lb_method = get_lb_method as lb_method
FIELDALIAS-get_all_statistics.statistics__type = get_all_statistics.statistics{}.type as statistics_types
FIELDALIAS-get_all_statistics.statistics__value_low = get_all_statistics.statistics{}.value.low as statistics_values
EVAL-current_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS$")))
EVAL-throughput = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_BYTES_IN$")))
EVAL-total_conns = if(mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")==null, null, mvindex(statistics_values, mvfind(statistics_types, "^STATISTIC_SERVER_SIDE_TOTAL_CONNECTIONS$")))
EVAL-sessions = if(isnotnull(statistics_types), statistics_values, null)

### General ###
[f5:bigip:syslog]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)(.*)(f5_irule|[^"]f5_asm|:\s(?:\d{4})[0-9A-Fa-f]{4}:\d+:\s+(?:[^:\s]{1,100}:[^:\s]{1,100}:\s*)?[0-9a-f]{8}:|( debug | info | warning | err | notice | alert | crit | emerg ))
TRANSFORMS-sourcetype=f5_bigip-irule-default, f5_bigip-irule-http, f5_bigip-irule-dns-request, f5_bigip-irule-dns-response, f5_bigip-irule-lb-failed, f5_bigip-syslog-asm, f5-bigip-apm-syslog, f5_bigip-irule-exclude-audit

[f5:bigip:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
TRANSFORMS-sourcetype = f5_bigip-icontrol-locallb, f5_bigip-icontrol-globallb, f5_bigip-icontrol-networking, f5_bigip-icontrol-management, f5_bigip-icontrol-system-systeminfo, f5_bigip-icontrol-system-statistics, f5_bigip-icontrol-system-disk, f5_bigip-icontrol-management-device, f5_bigip-icontrol-networking-interfaces, f5_bigip-icontrol-networking-adminip, f5_bigip-icontrol-locallb-pool, f5_bigip-icontrol-management-usermanagement

[f5:bigip:system:systeminfo:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-dest = get_system_information.host_name as dest
FIELDALIAS-family = get_system_information.os_machine as family
FIELDALIAS-serial = get_system_information.chassis_serial as serial
FIELDALIAS-chassis_serial_chassis = get_system_information.chassis_serial as chassis
FIELDALIAS-product_code = get_product_information.product_code as product_code
EVAL-vendor = "F5 Networks"
EVAL-vendor_product = "F5 "+product_code
FIELDALIAS-get_hardware_information_versions_value = get_hardware_information.versions{}.value as get_hardware_information_versions_value
EVAL-cpu_cores = mvindex(get_hardware_information_versions_value, 1)
EVAL-cpu_mhz = mvindex(get_hardware_information_versions_value, 2)
FIELDALIAS-blocksize = get_disk_usage_information.block_size.low as blocksize
FIELDALIAS-mount = get_disk_usage_information.partition_name as mount
FIELDALIAS-uptime = get_uptime as uptime
FIELDALIAS-get_global_cpu_usage_extended_information_type=get_global_cpu_usage_extended_information.type as get_global_cpu_usage_extended_information_type
FIELDALIAS-get_global_cpu_usage_extended_information_value_low = get_global_cpu_usage_extended_information.value.low as get_global_cpu_usage_extended_information_value_low
EVAL-cpu_load_percent = case(get_global_cpu_usage_extended_information_type=="STATISTIC_CPU_INFO_USAGE_RATIO", get_global_cpu_usage_extended_information_value_low)
EVAL-cpu_time = case(get_global_cpu_usage_extended_information_type=="STATISTIC_CPU_INFO_USER", get_global_cpu_usage_extended_information_value_low)
FIELDALIAS-serial_num = get_system_information.chassis_serial as serial_num
EVAL-cpu_usage_percent = case(get_global_cpu_usage_extended_information_type=="STATISTIC_CPU_INFO_USAGE_RATIO", get_global_cpu_usage_extended_information_value_low)
EVAL-cpu_count = mvindex(get_hardware_information_versions_value, 1)

[f5:bigip:system:statistics:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-get_global_statistics_type = get_global_statistics.type as get_global_statistics_type
FIELDALIAS-get_global_statistics_value_high = get_global_statistics.value.high as get_global_statistics_value_high
FIELDALIAS-get_global_statistics_value_low = get_global_statistics.value.low as get_global_statistics_value_low
FIELDALIAS-get_http_statistics_type = get_http_statistics.type as get_http_statistics_type
FIELDALIAS-get_http_statistics_value_low = get_http_statistics.value.low as get_http_statistics_value_low
EVAL-5XX_codes = case(get_http_statistics_type=="STATISTIC_HTTP_5XX_RESPONSES", get_http_statistics_value_low)
EVAL-cpu_count = case(get_global_statistics_type=="STATISTIC_CPU_COUNT", get_global_statistics_value_low)
EVAL-current_conns = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_CURRENT_CONNECTIONS", get_global_statistics_value_low)
EVAL-throughput = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_BYTES_IN", get_global_statistics_value_low)
EVAL-total_conns = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_TOTAL_CONNECTIONS", get_global_statistics_value_low)
EVAL-max_conns_percent = case(get_global_statistics_type=="STATISTIC_SERVER_SIDE_FIVE_MIN_AVG_MAXIMUM_CONNECTIONS", get_global_statistics_value_low)

#For predefined "get_global_host_statistics" without "breakField"
FIELDALIAS-get_global_statistics_type_s = get_global_host_statistics.statistics{}.type as get_global_statistics_type_s
FIELDALIAS-get_global_statistics_value_high_s = get_global_host_statistics.statistics{}.value.high as get_global_statistics_value_high_s
FIELDALIAS-get_global_statistics_value_low_s = get_global_host_statistics.statistics{}.value.low as get_global_statistics_value_low_s

EVAL-mem = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16))/1024/1024
EVAL-memory = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16))/1024/1024
EVAL-mem_used = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16))/1024/1024
EVAL-mem_usage_percent = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)) / (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)) * 100
EVAL-mem_used_percent = (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_USED_BYTES$")), null)), "hex"), 3)), 16)) / (tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_high_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"))>10, substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), -8), substr(tostring(tonumber(if(isnotnull(mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), mvindex(get_global_statistics_value_low_s, mvfind(get_global_statistics_type_s, "^STATISTIC_MEMORY_TOTAL_BYTES$")), null)), "hex"), 3)), 16)) * 100

#For "get_client_ssl_statistics"
FIELDALIAS-get_client_ssl_statistics_type = get_client_ssl_statistics.type AS get_client_ssl_statistics_type
FIELDALIAS-get_client_ssl_statistics_value_high = get_client_ssl_statistics.value.high as get_client_ssl_statistics_value_high
FIELDALIAS-get_client_ssl_statistics_value_low = get_client_ssl_statistics.value.low as get_client_ssl_statistics_value_low
EVAL-ssl_tps = case(get_client_ssl_statistics_type=="STATISTIC_SSL_FIVE_SEC_AVG_TOT_CONNS", tonumber(if(len(tostring(get_client_ssl_statistics_value_high, "hex"))>10, substr(tostring(get_client_ssl_statistics_value_high, "hex"), -8), substr(tostring(get_client_ssl_statistics_value_high, "hex"), 3)), 16)*pow(2,32)+tonumber(if(len(tostring(get_client_ssl_statistics_value_low, "hex"))>10, substr(tostring(get_client_ssl_statistics_value_low, "hex"), -8), substr(tostring(get_client_ssl_statistics_value_low, "hex"), 3)), 16))


[f5:bigip:system:disk:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-get_array_member_s = get_array_member{} as get_array_member_s
EVAL-array = mvindex(get_array_member_s, 0)
FIELDALIAS-storage = get_logical_disk_size as storage
FIELDALIAS-storage_used = get_logical_disk_space_in_use as storage_used
EVAL-storage_used_percent = storage_used/storage*100
EVAL-storage_free = storage-storage_used

[f5:bigip:management:device:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-mac = get_base_mac_address as mac
FIELDALIAS-status = get_failover_state as status
FIELDALIAS-get_description = get_description as description
FIELDALIAS-get_failover_state = get_failover_state as failover_state
FIELDALIAS-get_chassis_id = get_chassis_id as device_id
FIELDALIAS-get_chassis_id_chassis = get_chassis_id as chassis
FIELDALIAS-get_software_version = get_software_version as sw_version
EVAL-vendor = "F5 Networks"
EVAL-vendor_prod = "F5 " + get_product
EVAL-vendor_model = "F5 " + get_marketing_name
FIELDALIAS-cim_builder = get_software_version as version
FIELDALIAS-get_failover_state_failover_status_string = get_failover_state as failover_status_string
LOOKUP-f5_icontrol_ha_states = f5_icontrol_ha_states get_failover_state OUTPUTNEW failover_status
EVAL-vendor_product = "F5 " + get_product


[f5:bigip:networking:interfaces:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-interface = get_list as interface

[f5:bigip:networking:adminip:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-ip = get_list as ip

[f5:bigip:management:usermanagement:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
FIELDALIAS-user = get_fullname as user
FIELDALIAS-shell = get_login_shell as shell
FIELDALIAS-password = get_encrypted_password as password
FIELDALIAS-user_id = get_user_id as user_id
FIELDALIAS-user_priority = get_role as user_priority

[f5:bigip:networking:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host

[f5:bigip:management:icontrol]
MAX_TIMESTAMP_LOOKAHEAD = 1
#ADDON-9171
FIELDALIAS-replace_host = source as host
FIELDALIAS-f5_bigip_server_host = source as f5_bigip_server_host
EVAL-active_modules = if(module_interface=="Management.Provision", get_provisioned_list, null)



### ASM ###
[f5:bigip:asm:syslog]
FIELDALIAS-f5_bigip_server_host = unit_host AS f5_bigip_server_host
EVAL-is_f5_heartbeat = if(ip_client==host, "true", "false")
REPORT-all_reports = headers_extract, request_extract, response_extract, cookie_extract, http_user_agent_extract
FIELDALIAS-action = req_status AS action
EVAL-bytes_in = len(req)
EVAL-bytes_out = len(resp)
EVAL-bytes = len(req)+len(resp)
FIELDALIAS-dest = dest_ip AS dest
FIELDALIAS-http_method = method AS http_method
EVAL-http_user_agent_length = len(http_user_agent)
FIELDALIAS-site = dest_ip AS site
FIELDALIAS-src = ip_client AS src
FIELDALIAS-src_ip = ip_client AS src_ip
FIELDALIAS-status = resp_code AS status
FIELDALIAS-uri_path = uri AS uri_path
FIELDALIAS-uri_query = query_str AS uri_query
EVAL-url = dest_ip+":"+dest_port+uri
EVAL-url_length = len(dest_ip+":"+dest_port+uri)
FIELDALIAS-user = username AS user
EVAL-vendor = "F5 Networks"
EVAL-vendor_product = "F5 BIG-IP ASM"
FIELDALIAS-category = attack_type AS category
FIELDALIAS-dvc = unit_host AS dvc
FIELDALIAS-date_time = date_time AS date
FIELDALIAS-signature = virus_name AS signature



### APM ###
[f5:bigip:apm:syslog]
FIELDALIAS-f5_bigip_server_host = host AS f5_bigip_server_host
REPORT-apm_reports_0 = head_extract, session_var_extract,session_var_extract_2, username_extract, useragent_extract, client_info_extract, access_type_extract, acl_extract, f5_bigip_service_extract
REPORT-apm_reports_1 = throughput_extract,new_session_extract, del_session_extract, executed_agent_extract, access_policy_extract, access_policy_extract_2, acl_assigned_extract
REPORT-apm_reports_2 = acl_extract_expansion
EVAL-vendor = "F5 Networks"
EVAL-vendor_product = "F5 BIG-IP APM"
EVAL-action = if(isnull(access_policy_result), null, if(access_policy_result="Logon_Deny","blocked","allowed"))
EVAL-bytes = bytes_in+bytes_out
FIELDALIAS-acl_name2rule = acl_name AS rule
FIELDALIAS-src = src_ip AS src
FIELDALIAS-dest_ip = vip AS dest_ip
FIELDALIAS-vip2dest = vip AS dest
FIELDALIAS-dest_ip2dest = dest_ip AS dest
FIELDALIAS-dvc = host AS dvc
FIELDALIAS-dvc_ip = host AS dvc_ip
EVAL-signature = if(isnull(access_policy_result), null, if(access_policy_result="Logon_Deny",null,access_policy_result))
EVAL-http_user_agent=urldecode(http_user_agent)
EVAL-http_user_agent_length = len(urldecode(http_user_agent))
EVAL-status = if(session_var_name="session.http.last.response_status",session_var_value,null)
EVAL-url_length = len(url)
EVAL-session_var_value = if(isnull(session_var_name), null, if(isnull(session_var_value), "", session_var_value))

