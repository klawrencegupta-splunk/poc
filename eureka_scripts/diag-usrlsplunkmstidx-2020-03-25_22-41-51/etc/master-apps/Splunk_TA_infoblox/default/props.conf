[infoblox:port]
TRANSFORMS-0_branch_source_type = infoblox_branch_source_type_1, infoblox_branch_source_type_2, infoblox_branch_source_type_3
SHOULD_LINEMERGE = false
DATETIME_CONFIG = NONE
TRUNCATE = 0
EVENT_BREAKER_ENABLE = true

[infoblox:file]
TRANSFORMS-0_branch_source_type = infoblox_branch_source_type_1, infoblox_branch_source_type_2, infoblox_branch_source_type_3
MAX_TIMESTAMP_LOOKAHEAD = 20
SHOULD_LINEMERGE = false
TRUNCATE = 0
EVENT_BREAKER_ENABLE = true

[infoblox:dhcp]
#Extracts
EXTRACT-dhcp_1  = [^\:]+\:\s*(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\,\s*(?<state>[^\,]*)\,(?<dest_hostname>[^\,]*)\,\s*(?<dest_mac>[0-9a-zA-Z]{2}(?:\:[0-9a-zA-Z]{2}){5})\,\s*(?<start_time>\d*)\,\s*(?<end_time>\d*)\,
EXTRACT-dhcp_2  = Added\sreverse\smap\sfrom\s(?<reverse_ip_src>(?<reverse_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\S+)\s+to\s+(?<src_ip>\S+)
EXTRACT-dhcp_3  = Addition\sof\s(?<map_type>.+)\smap\sfor\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sdeferred
EXTRACT-dhcp_4  = (?<detail_fail_message>Unable\sto\sadd\s.+connection\srefused)
EXTRACT-dhcp_5  = from\s(?<src_ip>\S+)\sto\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\sconnection\srefused
EXTRACT-dhcp_6  = (?<fail_message>Server\srefused\supdate)\.\s(?<detail_fail_message>[^$]+)$
EXTRACT-dhcp_7  = server\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sfor\sprincipal\s(?<principal>\S+)[\.\s]
EXTRACT-dhcp_8  = (?<security_context_message>Security\scontext.+)\(good\sfor\s(?<good_duration>\d+)s\)
EXTRACT-dhcp_9  = BOOTREQUEST\sfrom\s(?<src_mac>[0-9a-zA-Z]{2}(?:\:[0-9a-zA-Z]{2}){5})\svia\s(?<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\s(?<bootp_message>.+)$
EXTRACT-dhcp_10 = Removed\sforward\smap\sfrom\s(?<src_forward>\S+)\sto\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
EXTRACT-dhcp_11 = Removed\sreverse\smap\son\s(?<reverse_ip_src>(?<reverse_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\S+)
EXTRACT-dhcp_12 = bind\supdate\son\s(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\sfrom\s(?<src_ip>\S+)\srejected\:\s(?<reject_reason>.+)
EXTRACT-dhcp_13 = dhcpd\[\d+\]\:\s(?<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\sremoving\sclient\sassociation

#Reports
REPORT-dhcp_types   = infoblox_dhcp_extract_field_0, infoblox_dhcp_extract_field_1, infoblox_dhcp_extract_field_2, infoblox_dhcp_extract_field_3, infoblox_dhcp_extract_field_4, infoblox_dhcp_extract_field_5, infoblox_dhcp_extract_field_6, infoblox_dhcp_extract_field_7, infoblox_dhcp_extract_field_8
REPORT-dhcp_extras  = infoblox_dhcp_extract_field_9, infoblox_dhcp_extract_field_10
REPORT-dhcp_blocked = infoblox_dhcp_extract_field_11

#Field Aliases
FIELDALIAS-dest_hostname-as-dest_nt_host  = dest_hostname AS dest_nt_host
FIELDALIAS-dhcp_type-as-signature         = dhcp_type AS signature
FIELDALIAS-src_hostname-as-src_nt_host    = src_hostname AS src_nt_host
FIELDALIAS-src_ip-as-src                  = src_ip AS src

#Evals
EVAL-dest               = coalesce(dest_ip,lease_ip)
EVAL-vendor_product     = "Infoblox NIOS"
EVAL-action             = if(in(lower(action_blocked),"refused","invalid","ignored","rejected","dhcpdecline","dhcpnak","removed","removing"), "blocked", "added")
EVAL-dest_category      = if((dhcp_type =="DHCPOFFER") OR (dhcp_type == "DHCPACK") OR (dhcp_type == "DHCPNAK"),"dhcp_client","dhcp_server")
EVAL-src_category       = if((dhcp_type =="DHCPOFFER") OR (dhcp_type == "DHCPACK") OR (dhcp_type == "DHCPNAK"),"dhcp_server","dhcp_client")

[infoblox:dns]
#Reports
REPORT-dns_extract   = dns_request, dns_request_src, dns_request_record_type
REPORT-dns_extract_2 = dns_response,dns_incepted,dns_records_extract, dns_response_src,dns_response_dest, dns_response_record_type
REPORT-dns_rpz_extract = dns_rpz_cef_0
REPORT-dns_fields_1  = infoblox_dns_extract_field_0, infoblox_dns_extract_field_1, infoblox_dns_extract_field_2, infoblox_dns_extract_field_3, infoblox_dns_extract_field_4, infoblox_dns_extract_field_5, infoblox_dns_extract_field_6, infoblox_dns_extract_field_8, infoblox_dns_extract_field_9, infoblox_dns_extract_field_10
REPORT-dns_fields_2  = infoblox_dns_extract_field_11, infoblox_dns_extract_field_12, infoblox_dns_extract_field_13, infoblox_dns_extract_field_14, infoblox_dns_extract_field_15, infoblox_dns_extract_field_16, infoblox_dns_extract_field_17
REPORT-dns_rpz_fields_1 = infoblox_dns_rpz_qname_fields



#Field Aliases
FIELDALIAS-answer       = dns_answer_name AS answer
FIELDALIAS-reply_code   = dns_response_rcode AS reply_code
FIELDALIAS-transport    = dns_response_protocol AS transport
FIELDALIAS-dest_port    = dns_request_client_port AS dest_port
FIELDALIAS-src_port     = dns_response_client_port AS src_port
FIELDALIAS-body         = msg AS body
FIELDALIAS-severity_id  = dns_rpz_severity_id AS severity_id
FIELDALIAS-name         = dns_rpz_type AS name

#Evals
EVAL-infoblox_ip = if(match(infoblox_host, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"), infoblox_host, null)
EVAL-answer_count   = mvcount(split(dns_response_RR_in_TEXT,";"))-1
EVAL-vendor_product = "Infoblox NIOS"
EVAL-dvc            = if(is_updating == "updating", infoblox_host, null)
EVAL-status         = if(is_updating == "updating", "success", null)
EVAL-object_id      = object + " at " + record
EVAL-change_type    = if(is_updating == "updating", "dns zone setting", null)
EVAL-action         = CASE(the_action == "adding", "created", the_action == "deleting", "deleted")
EVAL-dest           = if(match(message_type,"response"),server_ip,if(command == "dhcp_updater_default", infoblox_host, if(isnotnull(dst),dst,dns_request_client_ip)))
EVAL-query          = if(match(message_type,"response"),dns_response_queried_domain,if(match(message_type,"query"),dns_request_queried_domain,if(match(error_query,".*"),error_query,if(isnotnull(dns_rpz_query),dns_rpz_query,cache_query))))
EVAL-src	        = coalesce(src_req,src_resp,src_ip,src)
EVAL-record_type    = coalesce(record_type_req,record_type_resp,record_type_update,the_query_type)
EVAL-the_query_type = coalesce(qtype, the_query_type)

#Lookups
LOOKUP-20_look_up_extract   = infoblox_dns_query_type_lookup the_query_type OUTPUT query_type
LOOKUP-dns_reply_code       = infoblox_dns_reply_code_id_lookup dns_response_rcode OUTPUT reply_code_id
LOOKUP-dns_severity         = infoblox_severity_lookup severity_id OUTPUT severity

[infoblox:threatprotect]
#Reports
REPORT-threatprotect-extract 	= infoblox_threatprotect_field_0, infoblox_threatprotect_field_1

#Field Aliases
FIELDALIAS-src_ip			= src as src_ip
FIELDALIAS-src_port 		= spt as src_port
FIELDALIAS-dest_ip         	= dst as dest_ip
FIELDALIAS-dest_port 		= dpt as dest_port
FIELDALIAS-threat_action	= act as action
FIELDALIAS-category 		= cat as rule_category
FIELDALIAS-dvc				= infoblox_host as dvc
FIELDALIAS-dest				= dst as dest

#Evals
EVAL-vendor_product = "Infoblox NIOS"

LOOKUP-threatprotect-severity = infoblox_severity_lookup severity_id OUTPUT severity
